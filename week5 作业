import cv2
import numpy as np

# Step 1: 读取图像并转换为灰度图像
image = cv2.imread('input_image.jpg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Step 2: 应用高斯滤波去噪
blurred = cv2.GaussianBlur(gray, (5, 5), 1.4)

# Step 3: 计算梯度强度和方向
sobel_x = cv2.Sobel(blurred, cv2.CV_64F, 1, 0, ksize=3)  # x方向的Sobel算子
sobel_y = cv2.Sobel(blurred, cv2.CV_64F, 0, 1, ksize=3)  # y方向的Sobel算子
gradient_magnitude = np.sqrt(sobel_x**2 + sobel_y**2)
gradient_direction = np.arctan2(sobel_y, sobel_x)
gradient_direction = np.rad2deg(gradient_direction) % 180  # 转换为角度

# Step 4: 非极大值抑制
nms = np.zeros_like(gradient_magnitude)
for i in range(1, gradient_magnitude.shape[0] - 1):
    for j in range(1, gradient_magnitude.shape[1] - 1):
        angle = gradient_direction[i, j]

        if (0 <= angle < 22.5) or (157.5 <= angle <= 180):
            before = gradient_magnitude[i, j-1]
            after = gradient_magnitude[i, j+1]
        elif 22.5 <= angle < 67.5:
            before = gradient_magnitude[i-1, j+1]
            after = gradient_magnitude[i+1, j-1]
        elif 67.5 <= angle < 112.5:
            before = gradient_magnitude[i-1, j]
            after = gradient_magnitude[i+1, j]
        else:
            before = gradient_magnitude[i-1, j-1]
            after = gradient_magnitude[i+1, j+1]

        if gradient_magnitude[i, j] >= before and gradient_magnitude[i, j] >= after:
            nms[i, j] = gradient_magnitude[i, j]
        else:
            nms[i, j] = 0

# Step 5: 双阈值
high_threshold = nms.max() * 0.2
low_threshold = high_threshold * 0.5
strong_edges = np.zeros_like(nms)
weak_edges = np.zeros_like(nms)
strong_edges[nms >= high_threshold] = 255
weak_edges[(nms >= low_threshold) & (nms < high_threshold)] = 75

# Step 6: 边缘连接
edges = np.zeros_like(nms)
for i in range(1, nms.shape[0] - 1):
    for j in range(1, nms.shape[1] - 1):
        if weak_edges[i, j] == 75:
            if 255 in [strong_edges[i-1, j-1], strong_edges[i-1, j], strong_edges[i-1, j+1],
                       strong_edges[i, j-1], strong_edges[i, j+1],
                       strong_edges[i+1, j-1], strong_edges[i+1, j], strong_edges[i+1, j+1]]:
                edges[i, j] = 255

# 将强边缘直接赋值到最终结果中
edges[strong_edges == 255] = 255

# Step 7: 显示最终图像
cv2.imshow('Canny Edge Detection', edges)
cv2.waitKey(0)
cv2.destroyAllWindows()
