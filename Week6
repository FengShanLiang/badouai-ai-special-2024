import cv2
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# 读取图片
image = cv2.imread('your_image.jpg')

# --- 透视变换 ---
# 1. 定义原始图像的四个角点（实际情况需根据图片具体选择）
pts1 = np.float32([[x1, y1], [x2, y2], [x3, y3], [x4, y4]])

# 2. 定义目标图像的四个角点（目标图像的宽度和高度可以调整）
width, height = 300, 400  # 目标图像尺寸
pts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]])

# 3. 计算变换矩阵并应用
matrix = cv2.getPerspectiveTransform(pts1, pts2)
warped_image = cv2.warpPerspective(image, matrix, (width, height))

# --- KMeans聚类 ---
# 1. 将图像数据转换为二维数组，每个像素是一个数据点（R,G,B）
data = warped_image.reshape((-1, 3))

# 2. 使用KMeans进行颜色聚类（假设聚类为5类）
kmeans = KMeans(n_clusters=5, random_state=0)
labels = kmeans.fit_predict(data)
centroids = kmeans.cluster_centers_

# 3. 生成聚类结果图像（将每个像素替换为其所属簇的质心颜色）
clustered_image = centroids[labels].reshape(warped_image.shape).astype(np.uint8)

# --- 结果展示 ---
# 转换为RGB格式，以便使用matplotlib显示
warped_image_rgb = cv2.cvtColor(warped_image, cv2.COLOR_BGR2RGB)
clustered_image_rgb = cv2.cvtColor(clustered_image, cv2.COLOR_BGR2RGB)

# 显示透视变换后的图片和聚类后的图片
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Warped Image')
plt.imshow(warped_image_rgb)
plt.axis('off')

plt.subplot(1, 2, 2)
plt.title('Clustered Image')
plt.imshow(clustered_image_rgb)
plt.axis('off')
plt.show()
